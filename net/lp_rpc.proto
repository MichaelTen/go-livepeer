syntax = "proto3";

package net;

// RPC calls implemented by the orchestrator
service Orchestrator {

  // Called by the broadcaster to request transcoder info from an orchestrator.
  rpc GetTranscoder(TranscoderRequest) returns (TranscoderInfo);
}

// This request is sent by the broadcaster in `GetTranscoder` to request
// information on which transcoder to use.
message TranscoderRequest {

  // ID of the job that the broadcaster needs a transcoder for
  int64 jobId = 1;

  // Broadcaster's signature over the jobId
  bytes sig   = 2;
}

/*
  OSInfo needed to negotiate storages that will be used.
  It carries info needed to write to the storage.
*/
message OSInfo {

  // Storage type: s3, ipfs.
  string storage = 1;

  S3OSInfo s3info = 16;
}

message S3OSInfo {

  // Configured S3 bucket name
  string bucket = 1;

  // Configured S3 region
  string region = 2;
 
  // POST policy that S3 owner node creates to give write access to other node.
  string policy = 3;

  // Signature for POST policy.
  string signature = 4;

  // Needed for POST policy.
  string xAmzCredential = 5;

  // Needed for POST policy.
  string xAmzDate = 6;
}

message SessionInfo {
  // nonce - unique identificator of video stream, used in folder name there data saved in storage
  // (folder name matters when transcoder puts trasncoded data into B's owned storage).
  uint64 nonce = 1;

  OSInfo osInfo = 2;
}

// Used in POST /segment call to carry info about segment to transcode from broadcaster to transcoder
// Can contain credentials of OS where broadcaster wants transcoded data to be put.
message SegmentInfo {

  TypedURI turi = 1;

  SessionInfo sessionInfo = 2;
}

// The orchestrator sends this in response to `GetTranscoder`, containing the
// transcoder URI, associated credentials authorizing the broadcaster to
// use the transcoder, and miscellaneous data related to the job.
message TranscoderInfo {

  // URI of the transcoder to use for submitting segments.
  string transcoder  = 1;

  // Signals the authentication method to expect within `credentials`. This
  // field is opaque to the broadcaster, and should be passed to the transcoder.
  string authType    = 2;

  // Credentials to verify the request has been authorized by an orchestrator.
  // This field is opaque to the broadcaster.
  string credentials = 3;

  // Transcoded streamId list to update the master manifest on the broadcaster.
  map<string, string> streamIds = 16;

  // Orchestrator returns info about own input object storage, if it wants it to be used.
  OSInfo preferredIOS = 32;
}

// AuthToken is sent by the orchestrator and encoded in the `credentials` field
// This record is opaque to the broadcaster and is only relevant between the
// orchestrator and the transcoder.
message AuthToken {

  // Signature of the orchestrator over the remaining fields
  bytes sig   = 1;

  int64 jobId = 16;
}

// Data included by the broadcaster when submitting a segment for transcoding.
message SegData {

  // Sequence number of the segment to be transcoded
  int64 seq  = 1;

  // Hash of the segment data to be transcoded
  bytes hash = 2;

  // Broadcaster signature for the segment. Corresponds to:
  // broadcaster.sign(streamId | seqNo | dataHash)
  // where streamId is derived from the jobId
  bytes sig  = 3;
}

// Individual transcoded segment data.
message TranscodedSegmentData {

    // URL where the transcoded data can be downloaded from.
    string url = 1;

    TypedURI turl = 2;
}

/*
  TypedURI contains information needed to access segment written to specific storage.
  Plus it contains presentation of this segment in the manifest.
  Potentially it can contain credentials for reading data from storage
  (for now all we write should be public).
  */
message TypedURI {

  // ipfs, s3, ...
  string storage = 1;

  // Can be specific to storage driver. For now local and S3 storages contails absolute URL,
  // ipfs contains just hash of file.
  string uri = 2;

  // URI to be placed in manifest
  // for IPFS it is always will be ipfs://hash
  // for others it can be absolute url or just segment's name.
  string uri_in_manifest = 4;

  // Name that will be put into 'Title' field of media playlist.
  string title = 5;

  uint64 seqNo = 7;

  string streamID = 8;
}

// A set of transcoded segments following the profiles specified in the job.
message TranscodeData {

    // Transcoded data, in the order specified in the job options
    repeated TranscodedSegmentData segments = 1;

    // Signature of the hash of the concatenated hashes
    bytes sig = 2;
}

// Response that a transcoder sends after transcoding a segment.
message TranscodeResult {

    // Sequence number of the transcoded results.
    int64 seq = 1;

    // Result of transcoding can be an error, or successful with more info
    oneof result {
        string error = 2;
        TranscodeData data = 3;
    }
}
